import spgci as ci

# Instantiate the LNGGlobalAnalytics class
lng = ci.LNGGlobalAnalytics()

# Get tenders for a specific country and contract type
tenders = lng.get_tenders(country_name="United States", paginate=True)

# Optionally, filter tenders by contract type and option
fob_tenders = lng.get_tenders(contract_type="FOB", contract_option="Sell")


import spgci as ci

def fetch_refinery_alerts(username, password, appkey):
    # Set the credentials for SPGCI API access
    ci.set_credentials(username, password, appkey)

    # Instantiate the WorldRefineryData class
    wrd = ci.WorldRefineryData()

    # Fetch the refinery alerts; for example, fetch outages
    # Assuming `get_outages` method exists and fetches relevant alerts
    # You might need to pass specific parameters such as refinery_id or date range if applicable
    refinery_alerts = wrd.get_outages()  # This method might need more specific parameters based on your needs

    # Return the DataFrame containing the alerts
    return refinery_alerts

# Example usage (replace 'your_username', 'your_password', and 'your_appkey' with actual credentials)
if __name__ == "__main__":
    username = 'your_username'
    password = 'your_password'
    appkey = 'your_appkey'
    alerts = fetch_refinery_alerts(username, password, appkey)
    print(alerts)



import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

# Load data
df = pd.read_csv('oil_futures_daily.csv', index_col='Date', parse_dates=True)
df = df['Price'].asfreq('D')
df.dropna(inplace=True)

# Define training and test data
split_date = '2020-01-01'
train = df.loc[:split_date]
test = df.loc[split_date:]

# Fit the model
model = SARIMAX(train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
results = model.fit(disp=False)

# Forecast
forecast = results.get_forecast(steps=len(test))
forecast_mean = forecast.predicted_mean

# Plot the results
plt.figure(figsize=(10, 5))
plt.plot(train.index, train, label='Train')
plt.plot(test.index, test, label='Test')
plt.plot(forecast_mean.index, forecast_mean, label='Forecast')
plt.title('Backtest of SARIMA Model on Oil Futures')
plt.legend()
plt.show()

# Calculate performance metrics
mse = mean_squared_error(test, forecast_mean)
rmse = mse**0.5
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")




import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import warnings
warnings.filterwarnings("ignore")

plot_acf(df, lags=25)
plt.title('ACF for Oil Futures Prices')
plt.show()

plot_pacf(df, lags=25)
plt.title('PACF for Oil Futures Prices')
plt.show()
