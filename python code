import spgci as ci

# Instantiate the LNGGlobalAnalytics class
lng = ci.LNGGlobalAnalytics()

# Get tenders for a specific country and contract type
tenders = lng.get_tenders(country_name="United States", paginate=True)

# Optionally, filter tenders by contract type and option
fob_tenders = lng.get_tenders(contract_type="FOB", contract_option="Sell")


import spgci as ci

def fetch_refinery_alerts(username, password, appkey):
    # Set the credentials for SPGCI API access
    ci.set_credentials(username, password, appkey)

    # Instantiate the WorldRefineryData class
    wrd = ci.WorldRefineryData()

    # Fetch the refinery alerts; for example, fetch outages
    # Assuming `get_outages` method exists and fetches relevant alerts
    # You might need to pass specific parameters such as refinery_id or date range if applicable
    refinery_alerts = wrd.get_outages()  # This method might need more specific parameters based on your needs

    # Return the DataFrame containing the alerts
    return refinery_alerts

# Example usage (replace 'your_username', 'your_password', and 'your_appkey' with actual credentials)
if __name__ == "__main__":
    username = 'your_username'
    password = 'your_password'
    appkey = 'your_appkey'
    alerts = fetch_refinery_alerts(username, password, appkey)
    print(alerts)



import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

# Load data
df = pd.read_csv('oil_futures_daily.csv', index_col='Date', parse_dates=True)
df = df['Price'].asfreq('D')
df.dropna(inplace=True)

# Define training and test data
split_date = '2020-01-01'
train = df.loc[:split_date]
test = df.loc[split_date:]

# Fit the model
model = SARIMAX(train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
results = model.fit(disp=False)

# Forecast
forecast = results.get_forecast(steps=len(test))
forecast_mean = forecast.predicted_mean

# Plot the results
plt.figure(figsize=(10, 5))
plt.plot(train.index, train, label='Train')
plt.plot(test.index, test, label='Test')
plt.plot(forecast_mean.index, forecast_mean, label='Forecast')
plt.title('Backtest of SARIMA Model on Oil Futures')
plt.legend()
plt.show()

# Calculate performance metrics
mse = mean_squared_error(test, forecast_mean)
rmse = mse**0.5
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")




import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import warnings
warnings.filterwarnings("ignore")

plot_acf(df, lags=25)
plt.title('ACF for Oil Futures Prices')
plt.show()

plot_pacf(df, lags=25)
plt.title('PACF for Oil Futures Prices')
plt.show()







from statsmodels.tsa.statespace.sarimax import SARIMAX
import pandas as pd

# Ensure that the 'Date' column is the index and in datetime format
df.index = pd.to_datetime(df.index)

# Select the series from the DataFrame
df_price = df['LAST_PRICE'].dropna().astype(float)

# Specify the number of steps to forecast ahead
n_forecast = 1

# Create an empty list to store predictions
predictions = []
predictions_index = []

# Create an empty list to store the actual values (for comparison)
actuals = []

# The train/test loop
for i in range(len(df_price) - n_forecast):
    # Define the train data
    train = df_price.iloc[:i+n_forecast]
    
    # Define the model
    model = SARIMAX(train, order=(1,1,0), seasonal_order=(0,0,0,0))
    
    # Fit the model
    model_fit = model.fit(disp=False)
    
    # Define the test data (next value)
    actual = df_price.iloc[i+n_forecast]
    actuals.append(actual)
    
    # Forecast
    forecast = model_fit.forecast(steps=n_forecast)
    
    # Store the forecast and its corresponding time index
    predictions.append(forecast.iloc[0])
    predictions_index.append(df_price.index[i+n_forecast])

# Create a predictions DataFrame
predictions_df = pd.DataFrame(predictions, index=predictions_index, columns=['Predicted'])

# Create an actuals DataFrame
actuals_df = pd.DataFrame(actuals, index=predictions_index, columns=['Actual'])

# Plot
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
plt.plot(df_price, label='Original')
plt.plot(predictions_df, label='One-step-ahead Forecast', color='red')
plt.plot(actuals_df, label='Actual', color='green', alpha=0.7)
plt.legend()
plt.show()




from statsmodels.tsa.statespace.sarimax import SARIMAX
import pandas as pd

# Ensure 'Date' is the index and in datetime format if it's not already.
df.index = pd.to_datetime(df.index)

# Assuming 'LAST_PRICE' is the column with the prices.
# Ensure no missing values and the data type is float.
df_price = df['LAST_PRICE'].dropna().astype(float)

# Starting with 1000 historical data points for the initial model
initial_size = 1000
initial_train = df_price.iloc[:initial_size]

# Fit the initial SARIMAX model
initial_model = SARIMAX(initial_train, order=(1,1,0), seasonal_order=(0,0,0,0))
initial_fit = initial_model.fit(disp=False)

# Now we will forecast in a rolling manner starting from initial_size
predictions = []
predictions_index = []

for i in range(initial_size, len(df_price)):
    # Obtain the actual value for the day
    actual_value = df_price.iloc[i]
    
    # Forecast the next step
    next_forecast = initial_fit.forecast(steps=1)
    
    # Store the forecast and its corresponding time index
    predictions.append(next_forecast.iloc[0])
    predictions_index.append(df_price.index[i])
    
    # Update the model by appending the new observation
    initial_fit = initial_fit.extend([actual_value])

# Convert predictions to a Series for easy plotting
predictions_series = pd.Series(predictions, index=predictions_index)

# Plot
plt.figure(figsize=(10,6))
plt.plot(df_price, label='Original')
plt.plot(predictions_series, label='Predicted', color='red')
plt.legend()
plt.show()

